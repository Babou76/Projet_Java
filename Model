package model;

import java.sql.*;
import java.util.Random;
public class Model {
    static final String DB_URL = "jdbc:mysql://localhost/website1";
    static final String USER = "root";
    static final String PASS = "";
    public void registerCustomer(String firstName, String lastName, String password, String phoneNumber, String address) {
        // Code pour enregistrer un nouveau client dans la base de données
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);

            Random random = new Random();
            long customerLicence = Math.abs(random.nextLong()) % 100000000000000L;

            String sqlInsert = "INSERT INTO customer (customer_FirstName, customer_LastName, Customer_password, Customer_Phone, Customer_address, Customer_Licence, Customer_Type) VALUES (?, ?, ?, ?, ?, ?, 0)";
            PreparedStatement pstmt = conn.prepareStatement(sqlInsert);
            pstmt.setString(1, firstName);
            pstmt.setString(2, lastName);
            pstmt.setString(3, password);
            pstmt.setString(4, phoneNumber);
            pstmt.setString(5, address);
            pstmt.setLong(6, customerLicence);

            pstmt.executeUpdate();

            pstmt.close();
            conn.close();
        } catch (SQLException se) {
            se.printStackTrace();
            // Gérer l'erreur
        } catch (Exception e) {
            e.printStackTrace();
            // Gérer l'erreur
        }
    }
    public boolean checkCredentials(String username, String password) {
        boolean isValid = false;
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);

            String sqlQuery = "SELECT * FROM customer WHERE customer_FirstName=? AND Customer_password=?";
            PreparedStatement pstmt = conn.prepareStatement(sqlQuery);
            pstmt.setString(1, username);
            pstmt.setString(2, password);

            ResultSet rs = pstmt.executeQuery();
            isValid = rs.next(); // Vérifie s'il y a au moins une ligne correspondante dans le résultat

            rs.close();
            pstmt.close();
            conn.close();
        } catch (SQLException se) {
            se.printStackTrace();
            // Gérer l'erreur
        } catch (Exception e) {
            e.printStackTrace();
            // Gérer l'erreur
        }
        return isValid;
    }

    public boolean checkEmployeeCredentials(String username, String password) {
        boolean isValid = false;
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);

            String sqlQuery = "SELECT * FROM employee WHERE Employee_FirstName=? AND Employee_Password=?";
            PreparedStatement pstmt = conn.prepareStatement(sqlQuery);
            pstmt.setString(1, username);
            pstmt.setString(2, password);

            ResultSet rs = pstmt.executeQuery();
            isValid = rs.next(); // Vérifie s'il y a au moins une ligne correspondante dans le résultat

            rs.close();
            pstmt.close();
            conn.close();
        } catch (SQLException se) {
            se.printStackTrace();
            // Gérer l'erreur
        } catch (Exception e) {
            e.printStackTrace();
            // Gérer l'erreur
        }
        return isValid;
    }
}
